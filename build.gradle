buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Spring Boot Gradle Plugin を使用
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.7.1'
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'com.github.spotbugs' version '5.0.4'
    id 'jacoco'
    id "com.google.cloud.tools.jib" version "3.1.4"
}

jib.container.creationTime = 'USE_CURRENT_TIMESTAMP'

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

group = 'com.fooqoo56.dev'
version = '1.0.0'
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    invoker
}

dependencies {
    implementation(
            // webflux
            'org.springframework.boot:spring-boot-starter-webflux:+',
            // commons-lang3
            'org.apache.commons:commons-lang3:3.12.0',
            // collections4
            'org.apache.commons:commons-collections4:4.4',
            // com.squareup.okhttp3
            "com.squareup.okhttp3:okhttp:4.9.3",
            // spring-cloud-gcp-starter-logging
            'org.springframework.cloud:spring-cloud-gcp-starter-logging:+',
            // firestore
            'org.springframework.cloud:spring-cloud-gcp-starter-data-firestore:+',
            // validation
            'org.springframework.boot:spring-boot-starter-validation:+'
    )

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.glassfish.jaxb:jaxb-runtime:3.0.2'

    annotationProcessor(
            'org.projectlombok:lombok',
            'org.springframework.boot:spring-boot-configuration-processor'
    )

    // google cloud function for test
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.1.0'

    testImplementation(
            // spring boot test framework
            'org.springframework.boot:spring-boot-starter-test',
            // test library for webflux
            'io.projectreactor:reactor-test',
            // spock
            'org.spockframework:spock-core:2.0-groovy-3.0',
            // spock for spring boot
            'org.spockframework:spock-spring:2.0-groovy-3.0',
            // library for spock
            'cglib:cglib-nodep:3.3.0',
            // mock for webflux
            'com.squareup.okhttp3:mockwebserver:4.9.3'
    )

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.11.0'
}

test {
    useJUnitPlatform()
    testLogging {
        // テスト時の標準出力と標準エラー出力を表示する
        showStandardStreams true
        // イベントを出力する (TestLogEvent)
        events 'started', 'skipped', 'passed', 'failed'
    }
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
    excludeFilter = file('./config/spotbugs_filter.xml')
}

test.finalizedBy jacocoTestReport

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(
                    dir: it,
                    exclude: [
                            '**/*Application.class',
                            '**/*Exception.class',
                            '**/config/**',
                            '**/*Sandbox*.class',
                            '**/function/**'
                    ]
            )
        }))
    }
}